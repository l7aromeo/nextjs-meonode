import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'
import { Html, Body, Node } from '@meonode/ui'
import { cookies, headers } from 'next/headers'
import { ReactNode } from 'react'
import { StyleRegistry } from '@meonode/ui/nextjs-registry'
import { RootState } from '@src/redux/store'
import { Wrapper } from '@src/components/Wrapper'
import { userAgent } from 'next/server'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default async function RootLayout({ children }: { children: ReactNode }) {
  const reqHeaders = await headers()
  const ua = userAgent({ headers: reqHeaders })
  const isMobile = ua.device.type === 'mobile' || ua.device.type === 'tablet'

  const cookieStore = await cookies()
  const initialThemeMode = cookieStore.get('theme')?.value as 'light' | 'dark'

  const preloadedState: RootState = {
    app: {
      isMobile,
    },
  }

  return Html({
    lang: 'en',
    className: initialThemeMode === 'dark' ? 'dark-theme' : 'light-theme',
    'data-theme': initialThemeMode === 'dark' ? 'dark' : 'light',
    children: [
      Body({
        className: `${geistSans.variable} ${geistMono.variable} font-sans`,
        children: StyleRegistry({
          children: Node(Wrapper, {
            preloadedState,
            initialThemeMode,
            children,
          }),
        }),
      }),
    ],
  }).render()
}
